The compiled code without the optimization was:

(branch #t (label g328))
foo327
(assign return-value x)
(push return-value)
(assign return-value x)
(push return-value)
(pop p2)
(pop p1)
(assign return-value (+ p1 p2))
(pop continue)
(branch #t continue)
g328
(assign return-value 7)
(push return-value)
(pop x)
(push (label g330))
(branch #t (label foo327))
g330
(push return-value)
(pop x)
(push (label g329))
(branch #t (label foo327))
g329
(call (display return-value))



and when compiling with the optimization we get:

(branch #t (label g365))
foo364
(assign return-value x)
(push return-value)
(assign return-value x)
(push return-value)
(pop p2)
(pop p1)
(assign return-value (+ p1 p2))
(pop continue)
(branch #t continue)
g365
(assign x 7)
(push (label g367))
(branch #t (label foo364))
g367
(assign x return-value)
(push (label g366))
(branch #t (label foo364))
g366
(assign return-value return-value)


let's compare the relevant parts of the two side by side:

 unoptimized                   | optimized
===============================|====================================
(assign return-value 7)        | (assign x 7)
(push return-value)            | 
(pop x)                        | 
(push (label g330))            | (push (label g367))
(branch #t (label foo327))     | (branch #t (label foo364))
g330                           | g367
(push return-value)            | (assign x return-value)
(pop x)                        | 
(push (label g329))            | (push (label g366))
(branch #t (label foo327))     | (branch #t (label foo364))
g329                           | g366

it's much better code, doing direct assignments rather than shuffling everything between registers through the stack.

